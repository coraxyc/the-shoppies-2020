{"version":3,"sources":["components/Card.react.js","components/Searchbar.react.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","isBold","title","children","Searchbar","type","onChange","event","setSearchQuery","target","value","App","useState","data","setData","error","setError","searchQuery","nominations","setNominations","useEffect","length","fetch","process","then","response","json","Response","Error","info","Search","reduce","acc","movie","Title","year","Year","id","imdbID","catch","message","resultsTitle","map","key","onClick","alert","addNominatedMovie","disabled","filter","nominatedMovie","movieToRemove","undefined","id1","updatedMovies","existingMovie","removeNominatedMovie","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.df938838.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Card.css'\n\nfunction Card(props) {\n  return (\n    <div className=\"Card\">\n      <div className=\"title\">\n        {props.isBold ? <b>{props.title}</b> : props.title}\n      </div>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport '../styles/Searchbar.css'\n\nfunction Searchbar(props) {\n  return (\n    <div className=\"Searchbar\">\n      <i className=\"fa fa-search\"/>\n      <input\n        type=\"search\"\n        className=\"Search\"\n        onChange={(event) => props.setSearchQuery(event.target.value)}\n      />\n    </div>\n  );\n}\n\nexport default Searchbar;\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport Card from './components/Card.react';\nimport Searchbar from './components/Searchbar.react';\nimport './App.css';\n\nconst API_KEY = process.env.REACT_APP_OMDB_API_KEY;\nconst MIN_TITLE_LEN = 3;\nconst MAX_NOMINATIONS_LEN = 5;\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [nominations, setNominations] = useState([]);\n\n  useEffect(() => {\n    if (searchQuery.length < MIN_TITLE_LEN) {\n      setError(\"Please search for a longer title name.\");\n      setData([]);\n      return;\n    }\n\n    fetch(`https://www.omdbapi.com/?s=${searchQuery}&apikey=${API_KEY}`)\n      .then(response => response)\n      .then(response => response.json())\n      .then(response => {\n        if (response.Response === \"False\") {\n          setError(response.Error);\n        } else {\n          const info =\n            response.Search.reduce(\n              (acc, movie) => (\n                [...acc, { title: movie.Title, year: movie.Year, id: movie.imdbID }]\n              ), []\n            );\n          setData(info);\n        }\n      })\n      .catch(({ message }) => {\n        setError(message);\n      });\n  }, [searchQuery]);\n\n  const addNominatedMovie = (movie) => {\n    if (nominations.length === MAX_NOMINATIONS_LEN) {\n      alert(`You can only have up to ${MAX_NOMINATIONS_LEN} nominations.`)\n    } else {\n      setNominations([...nominations, movie]);\n    }\n  }\n\n  const removeNominatedMovie = (movieToRemove) => {\n    if (movieToRemove !== null && movieToRemove !== undefined) {\n      const id1 = movieToRemove.id;\n      const updatedMovies =\n        nominations.filter(existingMovie => existingMovie.id !== id1);\n      setNominations(updatedMovies);\n    }\n  }\n\n  const resultsTitle = searchQuery.length === 0 ? \"Results\" : `Results for \"${searchQuery}\"`;\n\n  return (\n    <div className=\"App\">\n      <div className=\"Column\">\n        <h1>The Shoppies</h1>\n        <Card title=\"Movie title\" isBold={true}>\n            <Searchbar setSearchQuery={setSearchQuery} />\n        </Card>\n        <div className=\"Row\">\n          <Card title={resultsTitle} isBold={true}>\n            {data.length > 0\n              ? <ul>\n                {data?.map((movie) =>\n                  <div className=\"Row\" key={movie.id}>\n                    <li>{`${movie.title} (${movie.year})`}</li>\n                    <button\n                      onClick={() => addNominatedMovie(movie)}\n                      disabled={\n                        nominations.filter(\n                          (nominatedMovie) =>\n                            nominatedMovie.id === movie.id).length > 0\n                      }>\n                      Nominate\n                      </button>\n                  </div>)}\n              </ul>\n              : <div>\n                {error ? error : \"Couldn't find any movies for this title. Try another title.\"}\n              </div>}\n\n          </Card>\n          <Card title=\"Nominations\" isBold={true}>\n            {nominations.length > 0\n              ? <ul>\n                {nominations.map((movie) =>\n                  <div className=\"Row\" key={movie.id}>\n                    <li>{`${movie.title} (${movie.year})`}</li>\n                    <button onClick={() => removeNominatedMovie(movie)}>Remove</button>\n                  </div>)}\n              </ul>\n              : <div>\n                {`You don't have any nominations yet. You can nominate up to ${MAX_NOMINATIONS_LEN} movies.`}\n              </div>\n            }\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}